generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum OauthProvider {
    GOOGLE
    GITHUB
}

enum Level {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

// enum courseStatus {
//     draft
//     generating
//     published
// }

model User {
    id            Int       @id @default(autoincrement())
    username      String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?

    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    lastLogin      DateTime @default(now())
    ProfilePicture String?  @default("")

    OauthProvider OauthProvider?
    OauthId       String?

    isPro   Boolean @default(false)
    credits Int     @default(10)

    accounts Account[]
    sessions Session[]

    courses Course[]
}

model Course {
    id          String  @id @default(cuid())
    name        String
    image       String
    level       Level   @default(INTERMEDIATE)
    isCompleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    units Unit[]
}

model Unit {
    id   String @id @default(cuid())
    name String

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    chapters Chapter[]

    @@index([courseId], name: "courseId")
}

model Chapter {
    id String @id @default(cuid())

    name               String
    youtubeSearchQuery String
    videoId            String?
    summary            String?

    unitId String
    unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

    questions Question[]

    @@index([unitId], name: "unitId")
}

model Question {
    id String @id @default(cuid())

    question String
    answer   String
    options  String[]

    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@index([chapterId], name: "chapterId")
}

model UserSubscription {
    id                     String    @id @default(cuid())
    userId                 Int       @unique
    stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
